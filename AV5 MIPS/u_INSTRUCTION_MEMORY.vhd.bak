-- Instruction Memory MIPS monocycle
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity u_INSTRUCTION_MEMORY is
port (
      pc          : in std_logic_vector (31 downto 0);
	   instruction : out std_logic_vector (31 downto 0);
	  );
end u_INSTRUCTION_MEMORY;

architecture arch_1 of u_INSTRUCTION_MEMORY is

signal w_opcode_addr: std_logic_vector (5 downto 0); -- Onde recebe o opcode do pc

type ROM_type is array (0 to 31) of std_logic_vextor (31 downto 0);
constant rom_data: ROM_type:=(
   "00000010001100100100000000100000", -- add $t0, $s1, $s2
   "00000000000000000000000000000000",
   "00000000000000000000000000000000",
   "00000000000000000000000000000000",
   "00000000000000000000000000000000",
   "00000000000000000000000000000000",
   "00000000000000000000000000000000",
   "00000000000000000000000000000000",
   "00000000000000000000000000000000",
   "00000000000000000000000000000000",
   "00000000000000000000000000000000",
   "00000000000000000000000000000000",
   "00000000000000000000000000000000",
   "00000000000000000000000000000000",
   "00000000000000000000000000000000",
   "00000000000000000000000000000000",
	"00000000000000000000000000000000",
   "00000000000000000000000000000000",
   "00000000000000000000000000000000",
   "00000000000000000000000000000000",
   "00000000000000000000000000000000",
   "00000000000000000000000000000000",
   "00000000000000000000000000000000",
   "00000000000000000000000000000000",
   "00000000000000000000000000000000",
   "00000000000000000000000000000000",
   "00000000000000000000000000000000",
   "00000000000000000000000000000000",
   "00000000000000000000000000000000",
   "00000000000000000000000000000000",
   "00000000000000000000000000000000",
   "00000000000000000000000000000000"
	);
begin 

rom_addr <= pc (6 downto 1);
instruction <= rom_data(to_integer(unsigned(rom_addr)))

end arch_1;
